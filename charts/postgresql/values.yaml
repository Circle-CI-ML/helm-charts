# Default values for postgresql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: postgres
  pullPolicy: IfNotPresent
  tag: "9.6"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# database root password for user postgres
rootPassword: postgres
# root user
rootUser: postgres
# databases to create
multidb: db1;db2
# multidbUser
multidbUser: data
# password for multi db
multidbUserPassord: database

backup:
  enabled: false
  # db list separated by space
  dblist : "db1 db2"
  backupdays: "7"
  # everyday 1 task will run
  schedule: "0 1 * * *"
  persistence:
    enabled: true
    ## if enabled storage class name and size in GiB
    storageClass: ""
    size: 8Gi
    accessMode: ReadWriteOnce

restore:
  enabled: false
  # db list separated by space
  dblist : "db1 db2"
  backup: "0 0"
  # backup can be in days with .sql or .gz backup files
  # example "backup": "0 0" it will pick todays backup file to restore from pvc
  #         "backup": "1 1" it will pick yesterday backup file to restore from pvc
  # will keep last 7 backup files in pvc
  # can update filepath directly in backup varaible, update filepath to true 
  filepath: "false"
  compress: "true"

initconfig:
  create-multi-db.sh: |-
    #!/bin/sh
    set -e
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -c "CREATE USER $PG_MULTI_DB_USER WITH ENCRYPTED PASSWORD '$PG_MULTI_DB_PASSWORD';"
    export IFS=";"
    for db in $PG_MULTI_DB; do
      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -c "CREATE DATABASE $db;"
      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE $db TO $PG_MULTI_DB_USER;"
    done


service:
  type: ClusterIP
  port: 5432

persistence:
  enabled: true
  ## if enabled storage class name and size in GiB
  storageClass: ""
  size: 8Gi
  accessMode: ReadWriteOnce

resources:
  limits:
    cpu: 500m
    memory: 500Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
global:
  sfappname: sf-portal-app
  sfprojectname: snappyflow-app
  sfappname_key: snappyflow/appname
  sfprojectname_key: snappyflow/projectname
  key: ""
  sfScheduler:
    enabled: false
    schedulerName: sf-scheduler
  sfNodeManager:
    enabled: false
    priorityClassName: sf-critical-pod
  loggingCollector:
    enabled: false
